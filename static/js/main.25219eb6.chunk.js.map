{"version":3,"sources":["components/UserInfo/UserInfo.tsx","api/users.ts","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/todos.ts","components/TodoForm/TodoForm.tsx","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","id","username","TodoInfo","todo","userId","users","find","cn","completed","title","TodoList","todos","map","TodoForm","onSubmit","useState","setTitle","hasTitleError","setHasTitleError","setUserId","hasUserIdError","setHasUserIdError","action","method","ev","preventDefault","trim","type","placeholder","value","onChange","target","htmlFor","disabled","getNewTodoId","Math","max","App","todosFromServer","setTodos","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25219eb6.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport users from '../../api/users';\n\ntype Props = {\n  todo: Todo;\n};\n\nconst getUserById = (id: number): User | null => {\n  return users.find(user => user.id === id) || null;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const user = getUserById(todo.userId);\n\n  return (\n    <article\n      data-id={todo.id}\n      className={cn('TodoInfo', { 'TodoInfo--completed': todo.completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {user\n      && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { useState } from 'react';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  users: User[];\n  onSubmit: (todo: Todo) => void;\n};\n\nexport const TodoForm: React.FC<Props> = ({ users, onSubmit }) => {\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const handleTitleChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(ev.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleUserIdChange = (ev: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+ev.target.value);\n    setHasUserIdError(false);\n  };\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n\n    setHasTitleError(false);\n    setHasUserIdError(false);\n  };\n\n  const handleSubmit = (ev: React.FormEvent) => {\n    ev.preventDefault();\n\n    setHasTitleError(!title.trim());\n    setHasUserIdError(!userId);\n\n    if (!title.trim() || !userId) {\n      return;\n    }\n\n    onSubmit({\n      title,\n      id: 0,\n      completed: false,\n      userId,\n    });\n\n    reset();\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        <label>\n          Title:&nbsp;&nbsp;\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            name=\"title\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitleChange}\n          />\n        </label>\n        {hasTitleError\n          && (<span className=\"error\">Please enter a title</span>\n          )}\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"user-id\">User:&nbsp;</label>\n        <select\n          data-cy=\"userSelect\"\n          id=\"user-id\"\n          name=\"user\"\n          value={userId}\n          onChange={handleUserIdChange}\n        >\n          <option value=\"0\" disabled>Choose a user</option>\n          {users.map(user => (\n            <option value={user.id} key={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {hasUserIdError\n          && (<span className=\"error\">Please choose a user</span>\n          )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\n\nimport todosFromServer from './api/todos';\nimport { TodoForm } from './components/TodoForm/TodoForm';\nimport users from './api/users';\nimport { Todo } from './types/Todo';\n\nconst getNewTodoId = (todos: Todo[]) => {\n  const maxId = Math.max(...todos.map(todo => todo.id));\n\n  return maxId + 1;\n};\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(todosFromServer);\n\n  const addTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: getNewTodoId(todos),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm users={users} onSubmit={addTodo} />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}